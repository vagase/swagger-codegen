{{#operations}}
#import "{{classname}}.h"
#import "SWGFile.h"
#import "SWGQueryParamCollection.h"
{{#imports}}#import "{{import}}.h"
{{/imports}}
{{newline}}

@implementation {{classname}}

{{#operation}}
/*!
 * {{{summary}}}
 * {{{notes}}}
{{#allParams}} * \param {{paramName}} {{{description}}}
{{/allParams}} * \returns {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
 */
{{#hasParams}}
-(NSNumber*) {{nickname}}With{{#allParams}}{{^secondaryParam}}{{paramNameCapitalized}}{{/secondaryParam}}{{#secondaryParam}} {{paramName}}{{/secondaryParam}}: ({{{dataType}}}) {{paramName}}{{/allParams}}
    {{#returnBaseType}}completionHandler: (void (^)({{{returnType}}} output, id responseObject, NSError* error, NSURLRequest *request, NSURLResponse *response))completionBlock { {{/returnBaseType}}
    {{^returnBaseType}}completionHandler: (void (^)(NSData *data, id responseObject, NSError* error, NSURLRequest *request, NSURLResponse *response))completionBlock { {{/returnBaseType}}
{{/hasParams}}
{{^hasParams}}
-(NSNumber*) {{nickname}}WithCompletionHandler:(void (^)({{#returnBaseType}}{{{returnType}}}{{/returnBaseType}}{{^returnBaseType}}NSData *{{/returnBaseType}} output, id responseObject, NSError* error, NSURLRequest *request, NSURLResponse *response))completionBlock {
{{/hasParams}}

    {{#allParams}}{{#required}}
    // verify the required parameter '{{paramName}}' is set
    NSAssert({{paramName}} != nil, @"Missing the required parameter `{{paramName}}` when calling {{nickname}}");
    {{/required}}{{/allParams}}

    NSMutableString* requestUrl = [NSMutableString stringWithFormat:@"%@{{path}}", self.basePath];

    // remove format in URL if needed
    if ([requestUrl rangeOfString:@".{format}"].location != NSNotFound)
        [requestUrl replaceCharactersInRange: [requestUrl rangeOfString:@".{format}"] withString:@".json"];

    {{#pathParams}}[requestUrl replaceCharactersInRange: [requestUrl rangeOfString:[NSString stringWithFormat:@"%@%@%@", @"{", @"{{baseName}}", @"}"]] withString: [SWGApiClient escape:{{paramName}}]];
    {{/pathParams}}

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    {{#queryParams}}if({{paramName}} != nil) {
        {{#collectionFormat}}
        queryParams[@"{{baseName}}"] = [[SWGQueryParamCollection alloc] initWithValuesAndFormat: {{baseName}} format: @"{{collectionFormat}}"];
        {{/collectionFormat}}
        {{^collectionFormat}}queryParams[@"{{baseName}}"] = {{paramName}};{{/collectionFormat}}
    }
    {{/queryParams}}
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionary];

    if ([self.delegate respondsToSelector:@selector(api:defaultHeadersForRequest:)]) {
        NSDictionary *defaultHeaders = [self.delegate api:self defaultHeadersForRequest:requestUrl];
        if (defaultHeaders) {
            [headerParams addEntriesFromDictionary:defaultHeaders];
        }
    }

    NSMutableDictionary* keyPaths = [NSMutableDictionary dictionary];
    if ([self.delegate respondsToSelector:@selector(api:defaultKeyPathsForRequest:)]) {
        NSDictionary *defaultKeyPaths = [self.delegate api:self defaultKeyPathsForRequest:requestUrl];
        if (defaultKeyPaths) {
            [keyPaths addEntriesFromDictionary:defaultKeyPaths];
        }
    }

    {{#headerParams}}if({{paramName}} != nil)
        headerParams[@"{{baseName}}"] = {{paramName}};
    {{/headerParams}}
    
    // HTTP header `Accept` 
    headerParams[@"Accept"] = [SWGApiClient selectHeaderAccept:@[{{#produces}}@"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}}]];
    if ([headerParams[@"Accept"] length] == 0) {
        [headerParams removeObjectForKey:@"Accept"];
    }

    // response content type
    NSString *responseContentType;
    if ([headerParams objectForKey:@"Accept"]) {
        responseContentType = [headerParams[@"Accept"] componentsSeparatedByString:@", "][0];
    }
    else {
        responseContentType = @"";
    }

    // request content type
    NSString *requestContentType = [SWGApiClient selectHeaderContentType:@[{{#consumes}}@"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}]];

    // Authentication setting
    NSArray *authSettings = @[{{#authMethods}}@"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}}];
    
    id bodyDictionary = nil;
    {{#bodyParam}}
    id __body = {{paramName}};

    if(__body != nil && [__body isKindOfClass:[NSArray class]]){
        NSMutableArray * objs = [[NSMutableArray alloc] init];
        for (id dict in (NSArray*)__body) {
            if([dict respondsToSelector:@selector(toDictionary)]) {
                [objs addObject:[(SWGObject*)dict toDictionary]];
            }
            else{
                [objs addObject:dict];
            }
        }
        bodyDictionary = objs;
    }
    else if([__body respondsToSelector:@selector(toDictionary)]) {
        bodyDictionary = [(SWGObject*)__body toDictionary];
    }
    else if([__body isKindOfClass:[NSString class]]) {
        // convert it to a dictionary
        NSError * error;
        NSString * str = (NSString*)__body;
        NSDictionary *JSON =
            [NSJSONSerialization JSONObjectWithData: [str dataUsingEncoding: NSUTF8StringEncoding]
                                            options: NSJSONReadingMutableContainers
                                              error: &error];
        bodyDictionary = JSON;
    }
    {{/bodyParam}}
    {{^bodyParam}}

    {{#formParams}}
    if(bodyDictionary == nil) {
        bodyDictionary = [[NSMutableArray alloc] init];
    }

    {{#notFile}}
    NSMutableDictionary * formParams = [[NSMutableDictionary alloc]init];
    formParams[@"{{paramName}}"] = {{paramName}};

    [bodyDictionary addObject:formParams];
    {{/notFile}}
    {{#isFile}}
    requestContentType = @"multipart/form-data";

    if({{paramName}} != nil) {
        {{paramName}}.paramName = @"{{baseName}}";
        [bodyDictionary addObject:{{paramName}}];
    }
    {{/isFile}}
    {{/formParams}}

    {{/bodyParam}}

    {{#requiredParamCount}}
    {{#requiredParams}}
    if({{paramName}} == nil) {
        // error
    }
    {{/requiredParams}}
    {{/requiredParamCount}}

    {{#returnContainer}}
    // response is in a container
    {{>apiBodyResponseWithContainer}}{{/returnContainer}}

    {{#returnSimpleType}}
    // non container response

    {{#returnTypeIsPrimitive}}
    // primitive response
    {{>apiPrimitiveResponse}}{{/returnTypeIsPrimitive}}

    {{#returnBaseType}}
    // complex response
    {{>apiNonPrimitiveResponse}}{{/returnBaseType}}
    {{/returnSimpleType}}

    {{^returnSimpleType}}{{^returnContainer}}
    // it's void
    {{>voidResponse}}
    {{/returnContainer}}{{/returnSimpleType}}
}

{{/operation}}

{{newline}}
{{/operations}}
@end



